@page "/SelectStatus"
@using System.Drawing;
@using Blazored.LocalStorage;
@layout MainLayout
@inject IQRScanService QRScanService
@inject ITinhCongService TinhCongService
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@if (!string.IsNullOrEmpty(UserId))
{
    <div class="right-side auth">
        <div>
            <ul class="nav align-items-center">
                <li class="nav-item">
                    <div class="dropdown">
                        <div class="dropdown-menu dropdown-menu-end profile-dropdown mt-1">
                            <button class="dropdown-item mb-2" @onclick="BeginSignOut">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-log-out"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>
                                Logout
                            </button>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    
}
<div class="row justify-content-center auth-wrapper">
    <div class="col-12 col-md-5 col-lg-4 bg-white box-shadow p-25">
        <div class="text-center">
            <h5 class="text-muted mb-0">Thay đổi trạng thái chấm công</h5>
            <p></p>
            <div class="text-center">
                <select class="form-select" @bind="SelectedStatus">
                    <option>Chọn</option>
                    @foreach (var ChamCongType in ChamCongTypes)
                    {
                        <option value="@ChamCongType.IdTypeChamCong">@ChamCongType.TenLoaiChamCong</option>
                    }
                </select>
            </div>
            <p></p>
            <button type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" class="btn btn-primary fs-14 fw-500 py-2 w-100" @onclick="Submit" disabled="@IsDisabled">
                @if (IsDisabled)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                Submit
            </button>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="@hiddenModal">
        <div class="modal-dialog">
            <div class="modal-content">
                @if (string.IsNullOrEmpty(UserId))
                {
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">
                                <span>Đăng nhập</span>
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="col-12">
                            <label for="email" class="form-label d-block">Tài Khoản</label>
                            <input id="email" @bind="loginViewModel.UserId" class="form-control" />
                        </div>
                        <div class="col-12">
                            <label for="password" class="form-label d-block">Mật Khẩu</label>
                            <input id="password" type="password" @bind="loginViewModel.Password" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="HandleLogin" disabled="@IsDisabledLogin">
                            @if (IsDisabledLogin)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            Đăng nhập
                        </button>
                    </div>
                }
                else if(!string.IsNullOrEmpty(Message))
                {
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">
                            <span>Thông báo</span>
                        </h5>
                    </div>
                    <div class="modal-body">
                        <span>@Message</span>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    List<ChamCongType> ChamCongTypes = new List<ChamCongType>();
    int SelectedStatus = 0;
    public bool IsDisabled { get; set; }
    public bool IsDisabledLogin { get; set; }
    public string? UserId { get; set; }
    public string? Message { get; set; }
    public bool? hiddenModal = true;
    //Double PsnPrkID = 0;
    private LoginViewModel loginViewModel = new();
    protected override async void OnInitialized()
    {
        try
        {
            UserId = await LocalStorage.GetItemAsync<string>("PsnPrkID");
            IsDisabled = true;
            StateHasChanged();
            ChamCongTypes = await TinhCongService.getsLoaiChamCong();
            IsDisabled = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private async Task HandleLogin()
    {
        IsDisabledLogin = true;
        Message = "";

        var result = await AuthService.Login(loginViewModel);
        if (result.Succeeded)
        {
            UserId = await LocalStorage.GetItemAsync<string>("PsnPrkID");
            hiddenModal = false;
            Message = "Đăng nhập thành công";
        }
        else
        {
            Message = "Đăng nhập thất bại";
        }
        IsDisabledLogin = false;
    }

    protected async void Submit()
    {
        Message = "";
        IsDisabled = true;
        StateHasChanged();
        if (string.IsNullOrEmpty(UserId))
        {
        }
        else
        {
            if (SelectedStatus != 0)
            {
                await QRScanService.changeStatus(double.Parse(UserId ?? "0"), SelectedStatus);
                Message = "Đổi trạng thái chấm công thành công";
                hiddenModal = false;
            }
            else
            {
                Message = "Bạn chưa chọn trạng thái chấm công";
            }
        }
        IsDisabled = false;
        StateHasChanged();
        //PsnPrkID = (double)(await LocalStorage.GetItemAsync<string>("RoleName"));
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await AuthService.Logout();
        UserId = await LocalStorage.GetItemAsync<string>("PsnPrkID");
    }
}